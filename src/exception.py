import sys

from src.logger import logging

def error_message_detail(error,error_detail:sys):
    _,_,exc_tb=error_detail.exc_info()
    file_name=exc_tb.tb_frame.f_code.co_filename
    error_message = "Error occured in python script[{0}], line number [{1}], error message :[{2}]".format(
        file_name,exc_tb.tb_lineno,str(error)
    )
    
    return error_message



class CustomException(Exception):
    def __init__(self,error_message,error_detail:sys):
        super().__init__(error_message)
        self.error_message = error_message_detail(error_message,error_detail=error_detail)
        
    def __str__(self):
        return self.error_message
    
    
    '''
    This code defines a custom exception class CustomException that formats and provides detailed information about an error 
    that occurs in the Python script. The function error_message_detail helps capture the specifics of the error, 
    and the CustomException class uses this function to generate a user-friendly error message. Let's break it down step by step:
    
    def error_message_detail(error, error_detail: sys):
    _, _, exc_tb = error_detail.exc_info()
    file_name = exc_tb.tb_frame.f_code.co_filename
    error_message = "Error occurred in python script[{0}], line number [{1}], error message: [{2}]".format(
        file_name, exc_tb.tb_lineno, str(error)
    )
    return error_message

    
    Arguments:

    error: This is the exception instance (e.g., ValueError, TypeError).
    error_detail: This is a module sys passed to the function, which allows access to the current exception details.
    Purpose:

    This function uses the sys.exc_info() method to get the traceback information of the current exception. 
    The traceback provides details like the file name and line number where the error occurred.
    Explanation:

    error_detail.exc_info() returns a tuple of three values: the exception type, exception value, and the traceback object.
    exc_tb.tb_frame.f_code.co_filename gives the name of the file where the error occurred.
    exc_tb.tb_lineno gives the line number where the exception was raised.
    The formatted string then composes a detailed error message, including:
    File Name: The name of the file containing the error.
    Line Number: The line number where the error occurred.
    Error Message: The string representation of the exception (str(error)).
    
    class CustomException(Exception):
    def __init__(self, error_message, error_detail: sys):
        super().__init__(error_message)
        self.error_message = error_message_detail(error_message, error_detail=error_detail)

    def __str__(self):
        return self.error_message

    
    
    Inheriting from Exception:

CustomException inherits from Python's built-in Exception class, making it a custom exception type.
Constructor (__init__):

The constructor takes two arguments: error_message (the message for the exception) and error_detail 
(which helps capture detailed error information from sys).
super().__init__(error_message) calls the parent Exception constructor to initialize the exception with the error message.
self.error_message is set to the formatted error message generated by error_message_detail. It contains the detailed 
error information (file name, line number, and the error message).
__str__ method:

The __str__ method is overridden to return the self.error_message. This method is called when you try to print the exception or convert it to a string.


Explanation of Key Parts
Traceback Handling: The sys.exc_info() method allows access to the current exception's traceback, 
which gives information about where the error occurred.
Custom Exception: The custom exception class CustomException formats the error message to include useful 
debugging information like the file and line number.
String Representation: The __str__ method provides a human-readable way of printing the exception.
Advantages of This Approach
Detailed Error Reporting: By using the sys.exc_info() method, you can capture detailed information about where and why the error occurred, making it easier to debug.
Custom Error Messages: You can create custom exceptions with your own messages and formats, improving error clarity.   
    '''
    
    
# if __name__=="__main__":
#     try:
#         a=1/0
#     except Exception as e:
#         logging.info("Divide by zero")
#         raise CustomException(e,sys)